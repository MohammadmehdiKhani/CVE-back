const Joi = require("joi");

validateLogin = (request) => {
  const schema = Joi.object({
    username: Joi.string().min(3).max(50).required().messages({
      "string.base": `نام کاربری باید یک رشته متن باشد.`,
      "string.empty": `نام کاربری نمی‌تواند خالی باشد.`,
      "string.min": `نام کاربری نمی‌تواند از 3 حرف کمتر باشد`,
      "any.required": `نام کاربری نمی‌تواند خالی باشد.`,
    }),
    password: Joi.string().min(3).max(300).required().messages({
      "string.base": `رمز عبور باید یک رشته متن باشد.`,
      "string.empty": `رمز عبور نمی‌تواند خالی باشد.`,
      "string.min": `رمز عبور نمی‌تواند از 3 حرف کمتر باشد`,
      "any.required": `رمز عبور نمی‌تواند خالی باشد.`,
    }),
  });

  const validationResult = schema.validate(request);
  if (validationResult.error) {
    const error = validationResult.error.details[0].message;
    const errorFor = validationResult.error.details[0].path[0];
    return { error: error, errorFor: errorFor };
  }
  return { error: undefined, errorFor: undefined };
};

validateRegister = (request) => {
  const schema = Joi.object({
    username: Joi.string().min(3).max(50).required().messages({
      "string.base": `نام کاربری باید یک رشته متن باشد.`,
      "string.empty": `نام کاربری نمی‌تواند خالی باشد.`,
      "string.min": `نام کاربری نمی‌تواند از 3 حرف کمتر باشد`,
      "any.required": `نام کاربری نمی‌تواند خالی باشد.`,
    }),
    password: Joi.string().min(3).max(300).required().messages({
      "string.base": `رمز عبور باید یک رشته متن باشد.`,
      "string.empty": `رمز عبور نمی‌تواند خالی باشد.`,
      "string.min": `رمز عبور نمی‌تواند از 3 حرف کمتر باشد`,
      "any.required": `رمز عبور نمی‌تواند خالی باشد.`,
    }),

    email: Joi.string().min(3).max(300).required().email().messages({
      "string.base": `ایمیل باید یک رشته متن باشد.`,
      "string.empty": `ایمیل نمی‌تواند خالی باشد.`,
      "string.min": `ایمیل نمی‌تواند از 3 حرف کمتر باشد`,
      "any.required": `ایمیل نمی‌تواند خالی باشد.`,
      "string.email": `فرمت ایمیل وارد شده معتبر نیست.`,
    }),
  });

  const validationResult = schema.validate(request);
  if (validationResult.error) {
    const error = validationResult.error.details[0].message;
    const errorFor = validationResult.error.details[0].path[0];

    return { error: error, errorFor: errorFor, YO: validationResult.error };
  }
  return { error: undefined, errorFor: undefined };
};

validateNewPassword = (request) => {
  const schema = Joi.object({
    newPassword: Joi.string().min(3).max(300).required().messages({
      "string.base": `رمز عبور جدید باید یک رشته متن باشد.`,
      "string.empty": `رمز عبور جدید نمی‌تواند خالی باشد.`,
      "string.min": `رمز عبور جدید نمی‌تواند از 3 حرف کمتر باشد`,
      "any.required": `رمز عبور جدید نمی‌تواند خالی باشد.`,
    }),
    newPasswordRepeat: Joi.string().min(3).max(300).required().messages({
      "string.base": `رمز عبور جدید باید یک رشته متن باشد.`,
      "string.empty": `رمز عبور جدید نمی‌تواند خالی باشد.`,
      "string.min": `رمز عبور جدید نمی‌تواند از 3 حرف کمتر باشد`,
      "any.required": `رمز عبور جدید نمی‌تواند خالی باشد.`,
    }),
    oldPassword: Joi.string().min(3).max(300).required().messages({
      "string.base": `رمز عبور قدیمی باید یک رشته متن باشد.`,
      "string.empty": `رمز عبور قدیمی نمی‌تواند خالی باشد.`,
      "string.min": `رمز عبور قدیمی نمی‌تواند از 3 حرف کمتر باشد`,
      "any.required": `رمز عبور قدیمی نمی‌تواند خالی باشد.`,
    }),
  });

  const validationResult = schema.validate(request);
  if (validationResult.error) {
    const error = validationResult.error.details[0].message;
    const errorFor = validationResult.error.details[0].path[0];
    return { error: error, errorFor: errorFor };
  }
  return { error: undefined, errorFor: undefined };
};

validateNewInfo = (request) => {
  const schema = Joi.object({
    email: Joi.string().min(3).max(300).required().email().messages({
      "string.base": `ایمیل باید یک رشته متن باشد.`,
      "string.empty": `ایمیل نمی‌تواند خالی باشد.`,
      "string.min": `ایمیل نمی‌تواند از 3 حرف کمتر باشد`,
      "any.required": `ایمیل نمی‌تواند خالی باشد.`,
      "string.email": `فرمت ایمیل وارد شده معتبر نیست.`,
    }),
  });

  if (!request.phoneNumber && !request.email)
    return { error: "درخواست تغییر مشخصات خالی است.", errorFor: "requestBody" };

  const validationResult = schema.validate({ email: request.email });
  if (validationResult.error) {
    const error = validationResult.error.details[0].message;
    const errorFor = validationResult.error.details[0].path[0];

    return { error: error, errorFor: errorFor };
  }
  return { error: undefined, errorFor: undefined };
};
module.exports = {
  validateLogin,
  validateRegister,
  validateNewPassword,
  validateNewInfo,
};
