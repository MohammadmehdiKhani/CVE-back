const Joi = require("joi");
const { User } = require("../models/user");
const { CVE } = require("../models/cve");
const { CPE } = require("../models/cpe");
const mongoose = require("mongoose");
const express = require("express");
const router = express.Router();
const auth = require("../middleware/auth.js");
const axios = require("axios");
var ObjectId = mongoose.Types.ObjectId;

/*router.post("/", auth, async (req, res) => {
  const user = await User.findById(req.user._id).select("-password");
  let programsClone = [...user.userArray];
  const programObjectId = new ObjectId(req.body.id);

  programsClone = programsClone.filter(
    (p) => p.program.toString() === req.body.id
  );
  if (programsClone.length > 0)
    return res.status(401).send({ error: "This program is already added" });


  //getting new CVEs for this choosen program


  const payload = { program: programObjectId, cvesList: [] };
  user.userArray.push(payload);
  user.save();
  res.send(user);
});*/

router.get("/", auth, async (req, res) => {
  const user = await User.findById(req.user._id)
    .select("-password")
    .populate("userPrograms");
  res.send(user.userPrograms);
});

router.get("/:id", auth, async (req, res) => {
  const user = await User.findById(req.user._id)
    .select("-password")
    .populate("userArray.cpe");

  let cpe = {};
  for (let i = 0; i < user.userArray.length; i++) {
    if (user.userArray[i].cpe._id.toString() === req.params.id) {
      cpe = user.userArray[i].cpe;
      break;
    }
  }
  res.send(cpe);
});

router.get("/:id/cves", auth, async (req, res) => {
  const cpe = await CPE.findById(req.params.id)
    .select("-password")
    .populate("cves");

  res.send({ cves: cpe.cves, cpeTitle: cpe.title });
});

router.post("/", auth, async (req, res) => {
  const user = await User.findById(req.user._id).select("-password");
  let programsClone = [...user.userPrograms];

  let currentProgram = await CPE.findOne({ cpeName: req.body.cpeName });
  console.log(currentProgram);

  if (!currentProgram) {
    console.log(req.body);

    let response = await axios.get(
      `https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=${req.body.cpeName}`
    );

    const newProgram = new CPE({
      cpeName: req.body.cpeName,
      cpeId: req.body.cpeId,
      title: req.body.title,
      cves: [],
    });

    for (let index = 0; index < response.data.vulnerabilities.length; index++) {
      const currentCVE = await CVE.findOne({
        cveCode: response.data.vulnerabilities[index].cve.id,
      });

      if (currentCVE !== null) {
        newProgram.cves.push(currentCVE);
        continue;
      }
      const cve = new CVE({
        cveCode: response.data.vulnerabilities[index].cve.id,
        text: response.data.vulnerabilities[index].cve.descriptions[0].value,
        lastModified: response.data.vulnerabilities[index].cve.lastModified,
      });

      newProgram.cves.push(cve);
      await cve.save();
    }

    await newProgram.save();
    currentProgram = newProgram;
  }

  if (programsClone.length > 0)
    programsClone = programsClone.filter(
      (p) => p.toString() === currentProgram._id.toString()
    );
  if (programsClone.length > 0)
    return res.status(401).send({ error: "This program is already added" });

  user.userPrograms.push(currentProgram._id);
  user.save();
  res.send(user);
});

/*

router.get("/:id/cves", auth, async (req, res) => {
  const user = await User.findById(req.user._id).select("-password");
  let cvesList = [];

  for (let i = 0; i < user.userArray.length; i++) {
    if (user.userArray[i].program.toString() === req.params.id) {
      cvesList = user.userArray[i].cvesList;
      break;
    }
  }

  let populatedCVEsList = [];
  for (let i = 0; i < cvesList.length; i++) {
    let cve = await CVE.findById(cvesList[i].cve);
    cveClone = {
      _id: cve._id,
      cveCode: cve.cveCode,
      text: cve.text,
      seen: cvesList[i].seen,
    };

    populatedCVEsList.push(cveClone);
  }

  res.send(populatedCVEsList);
});
*/
router.delete("/", auth, async (req, res) => {
  const user = await User.findById(req.user._id).select("-password");

  let programsClone = [...user.userPrograms];
  programsClone = programsClone.filter((p) => !(p.toString() === req.body.id));

  user.userPrograms = programsClone;

  user.save();
  res.send({ message: "deleted successfully" });
});

module.exports = router;
