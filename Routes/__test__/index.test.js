const app = require("../../app");
const request = require("supertest");
const mongoose = require("mongoose");
const { User } = require("../../models/user");
const { CVE } = require("../../models/cve");
const { CPE } = require("../../models/cpe");
const { findNewCVEs, sendEmail } = require("../../func");

describe.skip("API endpoints", () => {
  beforeAll(async () => {
    await mongoose.connect("mongodb://127.0.0.1:27017/CVE", {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
  });

  beforeEach(async () => {
    jest.setTimeout(600000);
    await User.deleteMany();
    await CVE.deleteMany();
    await CPE.deleteMany();
  });

  afterEach(async () => {
    // await User.deleteMany();
    // await CVE.deleteMany();
    // await CPE.deleteMany();
  });

  // afterAll(async () => {
  //   await Quote.drop();
  //   await mongoose.connection.close();
  // });

  describe("Register", () => {
    test("(GIVEN: empty db) (WHEN: user inserts a valid user pass email) (THEN: successfull register)", async () => {
      const res = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const user = await User.findOne({ username: "yasin" });
      expect(user.username).toBe("yasin");
      expect(res.body.token).not.toEqual(undefined);
    });

    test("(GIVEN: empty db) (WHEN: user inserts an username that has been used before) (THEN: failed register)", async () => {
      await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "yasinKhani@gmail.com",
      });

      const res = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "yasinGhorbani@gmail.com",
      });
      expect(res.body).toEqual({
        error: "قبلا کاربری با این نام کاربری ثبت نام کرده",
        type: "duplicateUsername",
      });
    });

    test("(GIVEN: empty db) (WHEN: user inserts an email that has been used before) (THEN: failed register)", async () => {
      await request(app).post("/users").send({
        username: "yasinKhani",
        password: "123",
        email: "yasin@gmail.com",
      });

      const res = await request(app).post("/users").send({
        username: "yasinGhorbani",
        password: "123",
        email: "yasin@gmail.com",
      });
      expect(res.body).toEqual({
        error: "قبلا کاربری با این ایمیل ثبت نام کرده",
        type: "duplicateEmail",
      });
    });

    test("(GIVEN: empty db) (WHEN: user does not insert at least one of inputs) (THEN: failed register)", async () => {
      const res1 = await request(app).post("/users").send({
        email: "yasin@gmail.com",
      });

      const res2 = await request(app).post("/users").send({
        username: "yasin",
        email: "yasin@gmail.com",
      });

      const res3 = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
      });
      expect(res1.body).toEqual({
        error: "نام کاربری نمی‌تواند خالی باشد.",
        errorFor: "username",
        type: "wrongInputFormat",
      });

      expect(res2.body).toEqual({
        error: "رمز عبور نمی‌تواند خالی باشد.",
        errorFor: "password",
        type: "wrongInputFormat",
      });

      expect(res3.body).toEqual({
        error: "ایمیل نمی‌تواند خالی باشد.",
        errorFor: "email",
        type: "wrongInputFormat",
      });
    });
  });

  describe("Login", () => {
    test("(GIVEN: user has been registered before) (WHEN: user inserts a valid user pass) (THEN: successfull login)", async () => {
      await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res = await request(app)
        .post("/users/login")
        .send({ username: "yasin", password: "123" });
      const user = await User.findOne({ username: "yasin" });

      expect(user.username).toBe("yasin");
      expect(res.body.token).not.toEqual(undefined);
    });

    test("(GIVEN: empty db) (WHEN: user inserts an invalid user pass that does not match any user) (THEN: failed login)", async () => {
      const res = await request(app)
        .post("/users/login")
        .send({ username: "yasin", password: "123" });

      expect(res.status).toBe(400);
      expect(res.body.error).toEqual("کاربری با این نام کاربری ثبت نام نکرده!");
      expect(res.body.type).toEqual("wrongUsername");
      expect(res.body.token).toEqual(undefined);
    });

    test("(GIVEN: ) (WHEN: user inserts an invalid user pass that does not contain username) (THEN: failed login)", async () => {
      const res = await request(app)
        .post("/users/login")
        .send({ password: "123" });

      expect(res.status).toBe(400);
      expect(res.body.error).toEqual("نام کاربری نمی‌تواند خالی باشد.");
      expect(res.body.errorFor).toEqual("username");
      expect(res.body.token).toEqual(undefined);
    });

    test("(GIVEN: ) (WHEN: user inserts an invalid user pass that does not contain password) (THEN: failed login)", async () => {
      const res = await request(app)
        .post("/users/login")
        .send({ username: "yasin" });

      expect(res.status).toBe(400);
      expect(res.body.error).toEqual("رمز عبور نمی‌تواند خالی باشد.");
      expect(res.body.errorFor).toEqual("password");
      expect(res.body.token).toEqual(undefined);
    });
  });

  describe("Change password", () => {
    test("(GIVEN: a db with registered user) (WHEN: user inserts valid old and new pass) (THEN: successfull change pass)", async () => {
      const res1 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res2 = await request(app)
        .put("/users/me/password")
        .send({ oldPassword: "123", newPassword: "1234" })
        .set("x-auth-token", res1.body.token);

      const res3 = await request(app)
        .post("/users/login")
        .send({ username: "yasin", password: "123" });
      const res4 = await request(app)
        .post("/users/login")
        .send({ username: "yasin", password: "1234" });

      expect(res3.body.token).toEqual(undefined);
      expect(res4.body.token).not.toEqual(undefined);
    });
  });

  describe("Change info", () => {
    test("(GIVEN: a db with registered user) (WHEN: user inserts both of email and phoneNumber) (THEN: successfull change info)", async () => {
      const res1 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res2 = await request(app)
        .put("/users/me/info")
        .send({ email: "ali@gmail.com", phoneNumber: "09131234567" })
        .set("x-auth-token", res1.body.token);

      const yasin = await User.findOne({ username: "yasin" });

      expect(yasin.email).toEqual("ali@gmail.com");
      expect(yasin.phoneNumber).toEqual("09131234567");
    });

    test("(GIVEN: a db with registered user that has a phone number) (WHEN: user inserts just email) (THEN: successfull change info)", async () => {
      const res1 = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "yasin@gmail.com",
      });

      const res3 = await request(app)
        .put("/users/me/info")
        .send({ phoneNumber: "09131234567" })
        .set("x-auth-token", res1.body.token);

      const res2 = await request(app)
        .put("/users/me/info")
        .send({ email: "ali@gmail.com" })
        .set("x-auth-token", res1.body.token);

      const yasin = await User.findOne({ username: "yasin" });

      expect(yasin.email).toEqual("ali@gmail.com");
      expect(yasin.phoneNumber).toEqual("09131234567");
    });

    test("(GIVEN: a db with registered user) (WHEN: user inserts not complete request bodies) (THEN: failed change info)", async () => {
      const res0 = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "yasin@gmail.com",
      });
      const res1 = await request(app)
        .put("/users/me/info")
        .send({ phoneNumber: "09121234567" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter1 = await User.findOne({ username: "yasin" });

      const res2 = await request(app)
        .put("/users/me/info")
        .send({ email: "", phoneNumber: "09131234567" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter2 = await User.findOne({ username: "yasin" });

      const res3 = await request(app)
        .put("/users/me/info")
        .send({ email: "ya", phoneNumber: "09131234567" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter3 = await User.findOne({ username: "yasin" });

      const res4 = await request(app)
        .put("/users/me/info")
        .send({ email: "yasin", phoneNumber: "09131234567" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter4 = await User.findOne({ username: "yasin" });

      const res5 = await request(app)
        .put("/users/me/info")
        .send({ email: "jasem@gmail.com", phoneNumber: "" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter5 = await User.findOne({ username: "yasin" });

      const res6 = await request(app)
        .put("/users/me/info")
        .send({ email: "jasem@gmail.com", phoneNumber: "12" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter6 = await User.findOne({ username: "yasin" });

      expect(yasinAfter1.email).toEqual("yasin@gmail.com");
      expect(yasinAfter1.phoneNumber).toEqual("09121234567");

      expect(yasinAfter2.email).toEqual("yasin@gmail.com");
      expect(yasinAfter2.phoneNumber).toEqual("09121234567");

      expect(yasinAfter3.email).toEqual("yasin@gmail.com");
      expect(yasinAfter3.phoneNumber).toEqual("09121234567");

      expect(yasinAfter4.email).toEqual("yasin@gmail.com");
      expect(yasinAfter4.phoneNumber).toEqual("09121234567");

      expect(yasinAfter5.email).toEqual("yasin@gmail.com");
      expect(yasinAfter5.phoneNumber).toEqual("09121234567");

      expect(yasinAfter6.email).toEqual("yasin@gmail.com");
      expect(yasinAfter6.phoneNumber).toEqual("09121234567");
    });
  });

  describe("get current user", () => {
    test("(GIVEN: a db that contains a user) (WHEN: user inserts a valid token) (THEN: successfull getting data)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .get("/users/me")
        .set("x-auth-token", res0.body.token);

      expect(res1.body.username).toBe("yasin");
    });

    test("(GIVEN: an empty db) (WHEN: user inserts a valid token) (THEN: failed getting data)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      await User.deleteMany();

      const res1 = await request(app)
        .get("/users/me")
        .set("x-auth-token", res0.body.token);

      expect(res1.body.error).toBe("کاربر حذف شده است.");
    });
  });

  describe("search CPEs", () => {
    test('(GIVEN: empty db) (WHEN: user inserts "trello" for keyWord query parameter ) (THEN: successfull getting data)', async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .get("/cpes")
        .set("x-auth-token", res0.body.token)
        .query({ keyWord: "trello" });

      expect(res1.body.totalResults).toBe(30);
    }, 20000);

    test("(GIVEN: empty db) (WHEN: user inserts a non sence string for keyWord query parameter ) (THEN: failed getting data)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .get("/cpes")
        .set("x-auth-token", res0.body.token)
        .query({ keyWord: "hello this is a random string here" });

      expect(res1.body.totalResults).toBe(0);
    }, 20000);
  });

  describe("add/delete/get operations on CPE", () => {
    test("(GIVEN: empty db) (WHEN: user inserts a valid cpe) (THEN: successfull add cpe)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      const user = await User.findOne({ username: "yasin" })
        .select("-password")
        .populate("userPrograms");

      const cvesCount = user.userPrograms[0].cves.length;

      //3258 is number of cves published for Windows 10
      expect(cvesCount).toBe(3258);
    }, 40000);
    test("(GIVEN: empty db) (WHEN: user inserts two valid cpe) (THEN: successfull add cpe)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      const res2 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x86:*",
          cpeId: "04C4935F-DA5A-4EDE-80FF-1B97D1AFE2CC",
          title: "Microsoft Windows 10 32-bit",
        })
        .set("x-auth-token", res0.body.token);

      const user = await User.findOne({ username: "yasin" })
        .select("-password")
        .populate("userPrograms");

      const program1CvesCount = user.userPrograms[0].cves.length;
      const program2CvesCount = user.userPrograms[1].cves.length;

      let myBool = false;
      if (
        (program1CvesCount == 3258 && program2CvesCount == 3209) ||
        (program1CvesCount == 3209 && program2CvesCount == 3258)
      )
        myBool = true;
      expect(myBool).toBe(true);
    }, 100000);

    test("(GIVEN: empty db) (WHEN: user inserts an invalid cpe) (THEN: failed add cpe)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "the invalid cpe name with akward format!!!*",
          cpeId: "some random string as Id 121455sdvsdv5454",
          title: "Invalid program",
        })
        .set("x-auth-token", res0.body.token);

      const user = await User.findOne({ username: "yasin" })
        .select("-password")
        .populate("userPrograms");

      const cpes = await CPE.find();

      expect(user.userPrograms[0]).not.toBeTruthy();
      expect(cpes.length).toBe(0);
      expect(res1.body).toEqual({
        error: "چنین برنامه‌ای یافت نشد.",
        type: "wrongInputFormat",
      });
    }, 40000);

    test("(GIVEN: empty db) (WHEN: user inserts two valid cpe and get list of them then) (THEN: successfull recive cpes)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      const res2 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x86:*",
          cpeId: "04C4935F-DA5A-4EDE-80FF-1B97D1AFE2CC",
          title: "Microsoft Windows 10 32-bit",
        })
        .set("x-auth-token", res0.body.token);

      const res3 = await request(app)
        .get("/my-cpes")
        .set("x-auth-token", res0.body.token);

      const user = await User.findOne({ username: "yasin" })
        .select("-password")
        .populate("userPrograms");

      expect(res3.body.length).toBe(2);
    }, 100000);

    test("(GIVEN: empty db) (WHEN: user inserts one valid cpe and get one of them then) (THEN: successfull recive cpes)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      const res2 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x86:*",
          cpeId: "04C4935F-DA5A-4EDE-80FF-1B97D1AFE2CC",
          title: "Microsoft Windows 10 32-bit",
        })
        .set("x-auth-token", res0.body.token);

      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      });

      const res3 = await request(app)
        .get(`/my-cpes/${cpe._id}`)
        .set("x-auth-token", res0.body.token);

      expect(res3.body.cpeId).toEqual(cpe.cpeId);
    }, 100000);

    test("(GIVEN: empty db) (WHEN: user try to get a cpe that does not exists) (THEN: failed recive cpe)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .get(`/my-cpes/a_random_id_that_does_not_exist`)
        .set("x-auth-token", res0.body.token);

      expect(res1.body).toEqual({
        error: "برنامه مورد نظر پیدا نشد.",
        type: "cpeNotFound",
      });
    }, 100000);

    test("(GIVEN: a db with a 2 cpe in it) (WHEN: user deletes one of them) (THEN: there should be only one cpe in userPrograms)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      const res2 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x86:*",
          cpeId: "04C4935F-DA5A-4EDE-80FF-1B97D1AFE2CC",
          title: "Microsoft Windows 10 32-bit",
        })
        .set("x-auth-token", res0.body.token);

      const window64bit = await CPE.findOne({
        cpeId: "04C4935F-DA5A-4EDE-80FF-1B97D1AFE2CC",
      });

      console.log(window64bit);
      const res3 = await request(app)
        .delete(`/my-cpes/${window64bit._id}`)
        .set("x-auth-token", res0.body.token);

      let yasin = await User.findOne({
        username: "yasin",
      }).populate("userPrograms");

      expect(yasin.userPrograms.length).toBe(1);
      expect(window64bit).toBeTruthy();
      expect(yasin.userPrograms[0].cpeId).toBe(
        "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569"
      );
    }, 200000);
  });

  describe("add/delete/get operations on CVE", () => {
    test("(GIVEN: a db with a cpe in it) (WHEN: user try to get a cpe's cves) (THEN: successfully recive cves)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes/")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      }).populate("cves");

      const res2 = await request(app)
        .get(`/my-cpes/${cpe._id}/cves`)
        .set("x-auth-token", res0.body.token);

      expect(res2.body.cves.length).toEqual(3258);
      expect(cpe.cves.length).toEqual(3258);
    }, 100000);

    test("(GIVEN: empty db) (WHEN: user try to get a cpe's cves that does not exist) (THEN: failed recive cves)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      }).populate("cves");

      const res2 = await request(app)
        .get(`/my-cpes/a_random_id)/cves`)
        .set("x-auth-token", res0.body.token);

      expect(res2.body).toEqual({
        error: "برنامه مورد نظر پیدا نشد.",
        type: "cpeNotFound",
      });
    }, 100000);

    test("(GIVEN: a db with a cpe in it) (WHEN: user try to get a specific cve of a cpe) (THEN: successfully recive cves)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes/")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      }).populate("cves");

      const cve = await CVE.findOne({
        cveCode: "CVE-2023-29411",
      });

      const res2 = await request(app)
        .get(`/my-cpes/${cpe._id}/cves/${cve._id}`)
        .set("x-auth-token", res0.body.token);

      console.log(res2.body);
      expect(res2.body.baseScore).toEqual("9.8");
      expect(res2.body.cveCode).toEqual("CVE-2023-29411");
    }, 100000);

    test("(GIVEN: a db with a cpe in it) (WHEN: user try to get a specific cve of a cpe that the cve does not exist) (THEN: failed recive cves)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes/")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      }).populate("cves");

      const cve = await CVE.findOne({
        cveCode: "CVE-2023-29411",
      });

      const res2 = await request(app)
        .get(`/my-cpes/${cpe._id}/cves/123`)
        .set("x-auth-token", res0.body.token);

      expect(res2.body).toEqual({
        error: "ناامنی مورد نظر پیدا نشد.",
        type: "cveNotFound",
      });
    }, 300000);

    test("(GIVEN: a db with a cpe in it) (WHEN: user try to get a specific cve of a cpe that the cpe does not exist) (THEN: failed recive cves)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes/")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      }).populate("cves");

      const cve = await CVE.findOne({
        cveCode: "CVE-2023-29411",
      });

      const res2 = await request(app)
        .get(`/my-cpes/random_string/cves/${cve._id}`)
        .set("x-auth-token", res0.body.token);

      expect(res2.body).toEqual({
        error: "برنامه مورد نظر پیدا نشد.",
        type: "cpeNotFound",
      });
    }, 300000);
  });

  describe("new CVEs", () => {
    test("(GIVEN: empty db) (WHEN: user inserts a valid cpe that has new CVEs and app tries to find new CVEs) (THEN: successfull add cpe and new CVEs and send email to user)", async () => {
      const res0 = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "mm.y.khani@gmail.com",
      });

      const res1 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      await findNewCVEs();

      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      }).populate("newCVEs");

      const res2 = await request(app)
        .get(`/my-cpes/${cpe._id}/new-cves`)
        .set("x-auth-token", res0.body.token);

      const user = await User.findOne({
        username: "yasin",
      }).populate("userPrograms");

      expect(user.userPrograms[0].newCVEs.length).toBe(5);
      expect(res2.body.newCVEs.length).toBe(5);
      expect(res2.body.cpeTitle).toBe("Microsoft Windows 10 64-bit");
    }, 100000);
  });
});
