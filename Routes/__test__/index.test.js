const app = require("../../app");
const request = require("supertest");
const mongoose = require("mongoose");
const { User } = require("../../models/user");
const { CVE } = require("../../models/cve");
const { CPE } = require("../../models/cpe");
const { findNewCVEs, makeStartAndEndDate } = require("../../func");
const axios = require("axios");

describe("API endpoints", () => {
  beforeAll(async () => {
    await mongoose.connect("mongodb://127.0.0.1:27017/CVE", {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
  });

  beforeEach(async () => {
    jest.setTimeout(600000);
    await User.deleteMany();
    await CVE.deleteMany();
    await CPE.deleteMany();
  });

  afterEach(async () => {
    // await User.deleteMany();
    // await CVE.deleteMany();
    // await CPE.deleteMany();
  });

  // afterAll(async () => {
  //   await Quote.drop();
  //   await mongoose.connection.close();
  // });

  describe("Register", () => {
    test("(GIVEN: empty db) (WHEN: user inserts a valid user pass email) (THEN: successfull register)", async () => {
      const res = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const user = await User.findOne({ username: "yasin" });
      expect(user.username).toBe("yasin");
      expect(res.body.token).not.toEqual(undefined);
    });

    test("(GIVEN: empty db) (WHEN: user inserts an username that has been used before) (THEN: failed register)", async () => {
      await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "yasinKhani@gmail.com",
      });

      const res = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "yasinGhorbani@gmail.com",
      });
      expect(res.body).toEqual({
        error: "قبلا کاربری با این نام کاربری ثبت نام کرده",
        type: "duplicateUsername",
      });
    });

    test("(GIVEN: empty db) (WHEN: user inserts an email that has been used before) (THEN: failed register)", async () => {
      await request(app).post("/users").send({
        username: "yasinKhani",
        password: "123",
        email: "yasin@gmail.com",
      });

      const res = await request(app).post("/users").send({
        username: "yasinGhorbani",
        password: "123",
        email: "yasin@gmail.com",
      });
      expect(res.body).toEqual({
        error: "قبلا کاربری با این ایمیل ثبت نام کرده",
        type: "duplicateEmail",
      });
    });

    test("(GIVEN: empty db) (WHEN: user does not insert at least one of inputs) (THEN: failed register)", async () => {
      const res1 = await request(app).post("/users").send({
        email: "yasin@gmail.com",
      });

      const res2 = await request(app).post("/users").send({
        username: "yasin",
        email: "yasin@gmail.com",
      });

      const res3 = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
      });
      expect(res1.body).toEqual({
        error: "نام کاربری نمی‌تواند خالی باشد.",
        errorFor: "username",
        type: "wrongInputFormat",
      });

      expect(res2.body).toEqual({
        error: "رمز عبور نمی‌تواند خالی باشد.",
        errorFor: "password",
        type: "wrongInputFormat",
      });

      expect(res3.body).toEqual({
        error: "ایمیل نمی‌تواند خالی باشد.",
        errorFor: "email",
        type: "wrongInputFormat",
      });
    });
  });

  describe("Login", () => {
    test("(GIVEN: user has been registered before) (WHEN: user inserts a valid user pass) (THEN: successfull login)", async () => {
      await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res = await request(app)
        .post("/users/login")
        .send({ username: "yasin", password: "123" });
      const user = await User.findOne({ username: "yasin" });

      expect(user.username).toBe("yasin");
      expect(res.body.token).not.toEqual(undefined);
    });

    test("(GIVEN: empty db) (WHEN: user inserts an invalid user pass that does not match any user) (THEN: failed login)", async () => {
      const res = await request(app)
        .post("/users/login")
        .send({ username: "yasin", password: "123" });

      expect(res.status).toBe(400);
      expect(res.body.error).toEqual("کاربری با این نام کاربری ثبت نام نکرده!");
      expect(res.body.type).toEqual("wrongUsername");
      expect(res.body.token).toEqual(undefined);
    });

    test("(GIVEN: ) (WHEN: user inserts an invalid user pass that does not contain username) (THEN: failed login)", async () => {
      const res = await request(app)
        .post("/users/login")
        .send({ password: "123" });

      expect(res.status).toBe(400);
      expect(res.body.error).toEqual("نام کاربری نمی‌تواند خالی باشد.");
      expect(res.body.errorFor).toEqual("username");
      expect(res.body.token).toEqual(undefined);
    });

    test("(GIVEN: ) (WHEN: user inserts an invalid user pass that does not contain password) (THEN: failed login)", async () => {
      const res = await request(app)
        .post("/users/login")
        .send({ username: "yasin" });

      expect(res.status).toBe(400);
      expect(res.body.error).toEqual("رمز عبور نمی‌تواند خالی باشد.");
      expect(res.body.errorFor).toEqual("password");
      expect(res.body.token).toEqual(undefined);
    });
  });

  describe("Change password", () => {
    test("(GIVEN: a db with registered user) (WHEN: user inserts valid old and new pass) (THEN: successfull change pass)", async () => {
      const res1 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res2 = await request(app)
        .put("/users/me/password")
        .send({ oldPassword: "123", newPassword: "1234" })
        .set("x-auth-token", res1.body.token);

      const res3 = await request(app)
        .post("/users/login")
        .send({ username: "yasin", password: "123" });
      const res4 = await request(app)
        .post("/users/login")
        .send({ username: "yasin", password: "1234" });

      expect(res3.body.token).toEqual(undefined);
      expect(res4.body.token).not.toEqual(undefined);
    });
  });

  describe("Change info", () => {
    test("(GIVEN: a db with registered user) (WHEN: user inserts both of email and phoneNumber) (THEN: successfull change info)", async () => {
      const res1 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res2 = await request(app)
        .put("/users/me/info")
        .send({ email: "ali@gmail.com", phoneNumber: "09131234567" })
        .set("x-auth-token", res1.body.token);

      const yasin = await User.findOne({ username: "yasin" });

      expect(yasin.email).toEqual("ali@gmail.com");
      expect(yasin.phoneNumber).toEqual("09131234567");
    });

    test("(GIVEN: a db with registered user that has a phone number) (WHEN: user inserts just email) (THEN: successfull change info)", async () => {
      const res1 = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "yasin@gmail.com",
      });

      const res3 = await request(app)
        .put("/users/me/info")
        .send({ phoneNumber: "09131234567" })
        .set("x-auth-token", res1.body.token);

      const res2 = await request(app)
        .put("/users/me/info")
        .send({ email: "ali@gmail.com" })
        .set("x-auth-token", res1.body.token);

      const yasin = await User.findOne({ username: "yasin" });

      expect(yasin.email).toEqual("ali@gmail.com");
      expect(yasin.phoneNumber).toEqual("09131234567");
    });

    test("(GIVEN: a db with registered user) (WHEN: user inserts not complete request bodies) (THEN: failed change info)", async () => {
      const res0 = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "yasin@gmail.com",
      });
      const res1 = await request(app)
        .put("/users/me/info")
        .send({ phoneNumber: "09121234567" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter1 = await User.findOne({ username: "yasin" });

      const res2 = await request(app)
        .put("/users/me/info")
        .send({ email: "", phoneNumber: "09131234567" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter2 = await User.findOne({ username: "yasin" });

      const res3 = await request(app)
        .put("/users/me/info")
        .send({ email: "ya", phoneNumber: "09131234567" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter3 = await User.findOne({ username: "yasin" });

      const res4 = await request(app)
        .put("/users/me/info")
        .send({ email: "yasin", phoneNumber: "09131234567" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter4 = await User.findOne({ username: "yasin" });

      const res5 = await request(app)
        .put("/users/me/info")
        .send({ email: "jasem@gmail.com", phoneNumber: "" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter5 = await User.findOne({ username: "yasin" });

      const res6 = await request(app)
        .put("/users/me/info")
        .send({ email: "jasem@gmail.com", phoneNumber: "12" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter6 = await User.findOne({ username: "yasin" });

      expect(yasinAfter1.email).toEqual("yasin@gmail.com");
      expect(yasinAfter1.phoneNumber).toEqual("09121234567");

      expect(yasinAfter2.email).toEqual("yasin@gmail.com");
      expect(yasinAfter2.phoneNumber).toEqual("09121234567");

      expect(yasinAfter3.email).toEqual("yasin@gmail.com");
      expect(yasinAfter3.phoneNumber).toEqual("09121234567");

      expect(yasinAfter4.email).toEqual("yasin@gmail.com");
      expect(yasinAfter4.phoneNumber).toEqual("09121234567");

      expect(yasinAfter5.email).toEqual("yasin@gmail.com");
      expect(yasinAfter5.phoneNumber).toEqual("09121234567");

      expect(yasinAfter6.email).toEqual("yasin@gmail.com");
      expect(yasinAfter6.phoneNumber).toEqual("09121234567");
    });
  });

  describe("get current user", () => {
    test("(GIVEN: a db that contains a user) (WHEN: user inserts a valid token) (THEN: successfull getting data)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .get("/users/me")
        .set("x-auth-token", res0.body.token);

      expect(res1.body.username).toBe("yasin");
    });

    test("(GIVEN: an empty db) (WHEN: user inserts a valid token) (THEN: failed getting data)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      await User.deleteMany();

      const res1 = await request(app)
        .get("/users/me")
        .set("x-auth-token", res0.body.token);

      expect(res1.body.error).toBe("کاربر حذف شده است.");
    });
  });

  describe("search CPEs", () => {
    test('(GIVEN: empty db) (WHEN: user inserts "trello" for keyWord query parameter ) (THEN: successfull getting data)', async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .get("/cpes")
        .set("x-auth-token", res0.body.token)
        .query({ keyWord: "trello" });

      expect(res1.body.totalResults).toBe(30);
    }, 20000);

    test("(GIVEN: empty db) (WHEN: user inserts a non sence string for keyWord query parameter ) (THEN: failed getting data)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .get("/cpes")
        .set("x-auth-token", res0.body.token)
        .query({ keyWord: "hello this is a random string here" });

      expect(res1.body.totalResults).toBe(0);
    }, 20000);
  });

  describe("add/delete/get operations on CPE", () => {
    test("(GIVEN: empty db) (WHEN: user inserts a valid cpe) (THEN: successfull add cpe)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      const user = await User.findOne({ username: "yasin" })
        .select("-password")
        .populate("userPrograms");

      const cvesCount = user.userPrograms[0].cves.length;
      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      }).populate("users");

      const response = await axios.get(
        `https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*`,
        {
          headers: { apiKey: "fbdba56c-61a3-4734-825b-b7763d4db31a" },
        }
      );
      expect(cvesCount).toBe(response.data.totalResults);
      expect(cpe.users[0].username).toBe("yasin");
    }, 100000);

    test("(GIVEN: db with 2 registered users) (WHEN: users inserts exact same two valid cpes) (THEN: successfull add cpe)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/users")
        .send({ username: "akbar", password: "123", email: "akbar@gmail.com" });

      const cpeNameString1 = "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*";
      const cpeNameString2 = "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x86:*";

      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: cpeNameString1,
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);
      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: cpeNameString1,
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res1.body.token);

      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: cpeNameString2,
          cpeId: "04C4935F-DA5A-4EDE-80FF-1B97D1AFE2CC",
          title: "Microsoft Windows 10 32-bit",
        })
        .set("x-auth-token", res0.body.token);
      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: cpeNameString2,
          cpeId: "04C4935F-DA5A-4EDE-80FF-1B97D1AFE2CC",
          title: "Microsoft Windows 10 32-bit",
        })
        .set("x-auth-token", res1.body.token);

      const yasin = await User.findOne({ username: "yasin" }).populate(
        "userPrograms"
      );

      const akbar = await User.findOne({ username: "akbar" }).populate(
        "userPrograms"
      );

      const cpe1 = await CPE.findOne({
        cpeName: cpeNameString1,
      }).populate("users");

      const cpe2 = await CPE.findOne({
        cpeName: cpeNameString2,
      }).populate("users");

      const response1 = await axios.get(
        `https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=${cpeNameString1}`,
        {
          headers: { apiKey: "fbdba56c-61a3-4734-825b-b7763d4db31a" },
        }
      );

      const response2 = await axios.get(
        `https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=${cpeNameString2}`,
        {
          headers: { apiKey: "fbdba56c-61a3-4734-825b-b7763d4db31a" },
        }
      );
      expect(cpe1.cves.length).toBe(response1.data.totalResults);
      expect(cpe2.cves.length).toBe(response2.data.totalResults);
      expect(cpe1.users.length).toBe(2);
      expect(
        cpe1.users.filter((u) => u.username === "yasin").length === 1
      ).toBe(true);
      expect(cpe2.users.length).toBe(2);
      expect(
        cpe2.users.filter((u) => u.username === "akbar").length === 1
      ).toBe(true);
      expect(
        yasin.userPrograms.filter((p) => p.cpeName === cpeNameString1)
          .length === 1
      ).toBe(true);
      expect(
        yasin.userPrograms.filter((p) => p.cpeName === cpeNameString2)
          .length === 1
      ).toBe(true);
    }, 200000);

    test("(GIVEN: empty db) (WHEN: user inserts an invalid cpe) (THEN: failed add cpe)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "the invalid cpe name with akward format!!!*",
          cpeId: "some random string as Id 121455sdvsdv5454",
          title: "Invalid program",
        })
        .set("x-auth-token", res0.body.token);

      const user = await User.findOne({ username: "yasin" })
        .select("-password")
        .populate("userPrograms");

      const cpes = await CPE.find();

      expect(user.userPrograms[0]).not.toBeTruthy();
      expect(cpes.length).toBe(0);
      expect(res1.body).toEqual({
        error: "چنین برنامه‌ای یافت نشد.",
        type: "wrongInputFormat",
      });
    }, 40000);

    test("(GIVEN: empty db) (WHEN: user inserts two valid cpe and get list of them then) (THEN: successfull recive cpes)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      const res2 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x86:*",
          cpeId: "04C4935F-DA5A-4EDE-80FF-1B97D1AFE2CC",
          title: "Microsoft Windows 10 32-bit",
        })
        .set("x-auth-token", res0.body.token);

      const res3 = await request(app)
        .get("/my-cpes")
        .set("x-auth-token", res0.body.token);

      const user = await User.findOne({ username: "yasin" })
        .select("-password")
        .populate("userPrograms");

      expect(res3.body.length).toBe(2);
      expect(res3.body[0].cpeName).toBeTruthy();
      expect(res3.body[1].cpeName).toBeTruthy();
    }, 100000);

    test("(GIVEN: empty db) (WHEN: user inserts one valid cpe and get one of them then) (THEN: successfull recive cpes)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      const res2 = await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x86:*",
          cpeId: "04C4935F-DA5A-4EDE-80FF-1B97D1AFE2CC",
          title: "Microsoft Windows 10 32-bit",
        })
        .set("x-auth-token", res0.body.token);

      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      });

      const res3 = await request(app)
        .get(`/my-cpes/${cpe.cpeId}`)
        .set("x-auth-token", res0.body.token);

      expect(res3.body.cpeId).toEqual(cpe.cpeId);
    }, 100000);

    test("(GIVEN: empty db) (WHEN: user try to get a cpe that does not exists) (THEN: failed recive cpe)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .get(`/my-cpes/a_random_id_that_does_not_exist`)
        .set("x-auth-token", res0.body.token);

      expect(res1.body).toEqual({
        error: "برنامه مورد نظر پیدا نشد.",
        type: "cpeNotFound",
      });
    }, 100000);

    test("(GIVEN: a db with 2 users that each of them has exast 2 same cpes) (WHEN: user1 deletes one of the cpes) (THEN: there should be only one cpe in user1 userPrograms and 2 in user2 userPrograms)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/users")
        .send({ username: "akbar", password: "123", email: "akbar@gmail.com" });

      const cpeNameString1 = "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*";
      const cpeNameString2 = "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x86:*";

      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: cpeNameString1,
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);
      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: cpeNameString1,
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res1.body.token);

      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: cpeNameString2,
          cpeId: "04C4935F-DA5A-4EDE-80FF-1B97D1AFE2CC",
          title: "Microsoft Windows 10 32-bit",
        })
        .set("x-auth-token", res0.body.token);
      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: cpeNameString2,
          cpeId: "04C4935F-DA5A-4EDE-80FF-1B97D1AFE2CC",
          title: "Microsoft Windows 10 32-bit",
        })
        .set("x-auth-token", res1.body.token);

      await request(app)
        .delete(`/my-cpes/DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569`)
        .set("x-auth-token", res0.body.token);

      const yasin = await User.findOne({
        username: "yasin",
      }).populate("userPrograms");

      const akbar = await User.findOne({
        username: "akbar",
      }).populate("userPrograms");

      const cpe1 = await CPE.findOne({
        cpeName: cpeNameString1,
      }).populate("users");

      const cpe2 = await CPE.findOne({
        cpeName: cpeNameString2,
      }).populate("users");

      expect(cpe1.users.length).toBe(1);
      expect(yasin.userPrograms.length).toBe(1);
      expect(akbar.userPrograms.length).toBe(2);
      expect(cpe1).toBeTruthy();
      expect(cpe2).toBeTruthy();
      expect(yasin.userPrograms[0].cpeId).toBe(
        "04C4935F-DA5A-4EDE-80FF-1B97D1AFE2CC"
      );
    }, 200000);
  });

  describe("add/delete/get operations on CVE", () => {
    test("(GIVEN: a db with 2 users that they have a same cpe) (WHEN: users try to get cpe's cves) (THEN: successfully recive cves)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/users")
        .send({ username: "jafar", password: "123", email: "jafar@gmail.com" });

      await request(app)
        .post("/my-cpes/")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      await request(app)
        .post("/my-cpes/")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res1.body.token);

      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      }).populate("cves");

      const res2 = await request(app)
        .get(`/my-cpes/${cpe.cpeId}/cves`)
        .set("x-auth-token", res0.body.token);

      const res3 = await request(app)
        .get(`/my-cpes/${cpe.cpeId}/cves`)
        .set("x-auth-token", res1.body.token);

      const response = await axios.get(
        `https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*`,
        {
          headers: { apiKey: "fbdba56c-61a3-4734-825b-b7763d4db31a" },
        }
      );

      expect(res2.body.cves.length).toEqual(response.data.totalResults);
      expect(res3.body.cves.length).toEqual(response.data.totalResults);
      expect(cpe.cves.length).toEqual(response.data.totalResults);
    }, 100000);

    test("(GIVEN: empty db) (WHEN: user try to get a cpe's cves that does not exist) (THEN: failed recive cves)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      }).populate("cves");

      const res2 = await request(app)
        .get(`/my-cpes/a_random_id)/cves`)
        .set("x-auth-token", res0.body.token);

      expect(res2.body).toEqual({
        error: "برنامه مورد نظر پیدا نشد.",
        type: "cpeNotFound",
      });
    }, 100000);

    test("(GIVEN: a db with a cpe in it) (WHEN: user try to get a specific cve of a cpe) (THEN: successfully recive cves)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes/")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      }).populate("cves");

      const cve = await CVE.findOne({
        cveCode: "CVE-2023-29411",
      });

      const res2 = await request(app)
        .get(`/my-cpes/${cpe.cpeId}/cves/${cve.cveCode}`)
        .set("x-auth-token", res0.body.token);

      expect(res2.body.baseScore).toEqual("9.8");
      expect(res2.body.cveCode).toEqual("CVE-2023-29411");
    }, 100000);

    test("(GIVEN: a db with a cpe in it) (WHEN: user try to get a specific cve of a cpe that the cve does not exist) (THEN: failed recive cves)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes/")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      }).populate("cves");

      const cve = await CVE.findOne({
        cveCode: "CVE-2023-29411",
      });

      const res2 = await request(app)
        .get(`/my-cpes/${cpe.cpeId}/cves/123`)
        .set("x-auth-token", res0.body.token);

      expect(res2.body).toEqual({
        error: "ناامنی مورد نظر پیدا نشد.",
        type: "cveNotFound",
      });
    }, 300000);

    test("(GIVEN: a db with a cpe in it) (WHEN: user try to get a specific cve of a cpe that the cpe does not exist) (THEN: failed recive cves)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .post("/my-cpes/")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      }).populate("cves");

      const cve = await CVE.findOne({
        cveCode: "CVE-2023-29411",
      });

      const res2 = await request(app)
        .get(`/my-cpes/random_string/cves/${cve.cveCode}`)
        .set("x-auth-token", res0.body.token);

      expect(res2.body).toEqual({
        error: "برنامه مورد نظر پیدا نشد.",
        type: "cpeNotFound",
      });
    }, 300000);
  });

  describe("new CVEs", () => {
    test("(GIVEN: db with a user) (WHEN: user inserts a valid cpe that has new CVEs and app tries to find new CVEs) (THEN: successfull add cpe and new CVEs and send email to user)", async () => {
      const res0 = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "mm.y.khani@gmail.com",
      });

      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      await findNewCVEs();

      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      }).populate("newCVEs");

      const res2 = await request(app)
        .get(`/my-cpes/${cpe.cpeId}/new-cves`)
        .set("x-auth-token", res0.body.token);

      const user = await User.findOne({
        username: "yasin",
      }).populate("userPrograms");

      const date = makeStartAndEndDate();
      const requestString = `https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=${cpe.cpeName}&pubStartDate=${date.startYear}-${date.startMonth}-${date.startDate}T00:00:00.000&pubEndDate=${date.endYear}-${date.endMonth}-${date.endDate}T00:00:00.000`;
      const response = await axios.get(requestString, {
        headers: { apiKey: "fbdba56c-61a3-4734-825b-b7763d4db31a" },
      });

      expect(user.userPrograms[0].newCVEs.length).toBe(
        response.data.vulnerabilities.length
      );
      expect(res2.body.newCVEs.length).toBe(
        response.data.vulnerabilities.length
      );
      expect(res2.body.cpeTitle).toBe("Microsoft Windows 10 64-bit");
    }, 100000);

    test("(GIVEN: db with 2 users in it) (WHEN: users inserts same valid cpe that has new CVEs and app tries to find new CVEs) (THEN: successfull add cpe and new CVEs and send email to users)", async () => {
      const res0 = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "mm.y.khani@gmail.com",
      });

      const res1 = await request(app).post("/users").send({
        username: "akbar",
        password: "123",
        email: "mohammadmehdi_khani@outlook.com",
      });

      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res1.body.token);

      await findNewCVEs();

      const cpe = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      }).populate("newCVEs");

      const res2 = await request(app)
        .get(`/my-cpes/${cpe.cpeId}/new-cves`)
        .set("x-auth-token", res0.body.token);

      const res3 = await request(app)
        .get(`/my-cpes/${cpe.cpeId}/new-cves`)
        .set("x-auth-token", res1.body.token);

      const yasin = await User.findOne({
        username: "yasin",
      }).populate("userPrograms");

      const akbar = await User.findOne({
        username: "akbar",
      }).populate("userPrograms");

      const date = makeStartAndEndDate();
      const requestString = `https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=${cpe.cpeName}&pubStartDate=${date.startYear}-${date.startMonth}-${date.startDate}T00:00:00.000&pubEndDate=${date.endYear}-${date.endMonth}-${date.endDate}T00:00:00.000`;
      const response = await axios.get(requestString, {
        headers: { apiKey: "fbdba56c-61a3-4734-825b-b7763d4db31a" },
      });

      expect(yasin.userPrograms[0].newCVEs.length).toBe(
        response.data.vulnerabilities.length
      );
      expect(akbar.userPrograms[0].newCVEs.length).toBe(
        response.data.vulnerabilities.length
      );
      expect(res2.body.newCVEs.length).toBe(
        response.data.vulnerabilities.length
      );
      expect(res3.body.newCVEs.length).toBe(
        response.data.vulnerabilities.length
      );
      expect(res2.body.cpeTitle).toBe("Microsoft Windows 10 64-bit");
      expect(res3.body.cpeTitle).toBe("Microsoft Windows 10 64-bit");
    }, 500000);
    test("(GIVEN: db with 2 users in it) (WHEN: user1 adds 3 programs which of them have new cves, user2 adds 3 programs which 1 of them have new cves and the program that has new cves is also in user1 programs) (THEN: successfull add cpe and new CVEs and send email to users)", async () => {
      const res0 = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "mm.y.khani@gmail.com",
      });

      const res1 = await request(app).post("/users").send({
        username: "akbar",
        password: "123",
        email: "mohammadmehdi_khani@outlook.com",
      });

      // yasin's programs
      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res0.body.token);

      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:google:android:13.0:*:*:*:*:*:*:*",
          cpeId: "36DB42C7-1317-4784-A679-73C7C8B1818C",
          title: "Google Android 13.0",
        })
        .set("x-auth-token", res0.body.token);

      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:a:microsoft:excel:2007:*:*:*:*:*:*:*",
          cpeId: "CC7137CB-4867-48BF-8E22-146AA15C06C1",
          title: "Microsoft Excel 2007",
        })
        .set("x-auth-token", res0.body.token);

      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
          cpeId: "DFE5D4B4-DFF6-4A48-A0A0-F092B7BF0569",
          title: "Microsoft Windows 10 64-bit",
        })
        .set("x-auth-token", res1.body.token);
      // akbar's programs

      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:a:microsoft:excel:2004:*:*:*:*:*:*:*",
          cpeId: "D5FAD0DD-B83A-4D97-AA49-044322635381",
          title: "Microsoft Excel 2004",
        })
        .set("x-auth-token", res1.body.token);
      await findNewCVEs();

      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:a:microsoft:excel:2002:*:*:*:*:*:*:*",
          cpeId: "FCBDF01A-4A03-4B06-9E69-D9A7A854BF9D",
          title: "Microsoft Excel 2002",
        })
        .set("x-auth-token", res1.body.token);
      await findNewCVEs();

      const windows10 = await CPE.findOne({
        cpeName: "cpe:2.3:o:microsoft:windows_10:-:*:*:*:*:*:x64:*",
      }).populate("newCVEs");

      const android13 = await CPE.findOne({
        cpeName: "cpe:2.3:o:google:android:13.0:*:*:*:*:*:*:*",
      }).populate("newCVEs");

      const excel2007 = await CPE.findOne({
        cpeName: "cpe:2.3:a:microsoft:excel:2007:*:*:*:*:*:*:*",
      }).populate("newCVEs");

      const excel2004 = await CPE.findOne({
        cpeName: "cpe:2.3:a:microsoft:excel:2004:*:*:*:*:*:*:*",
      }).populate("newCVEs");

      const excel2002 = await CPE.findOne({
        cpeName: "cpe:2.3:a:microsoft:excel:2002:*:*:*:*:*:*:*",
      }).populate("newCVEs");

      //yasin
      const resOfWindowsNewCVEsYasin = await request(app)
        .get(`/my-cpes/${windows10.cpeId}/new-cves`)
        .set("x-auth-token", res0.body.token);

      const resOfAndroid13NewCVEsYasin = await request(app)
        .get(`/my-cpes/${android13.cpeId}/new-cves`)
        .set("x-auth-token", res0.body.token);

      //akbar
      const resOfWindowsNewCVEsAkbar = await request(app)
        .get(`/my-cpes/${windows10.cpeId}/new-cves`)
        .set("x-auth-token", res1.body.token);

      const yasin = await User.findOne({
        username: "yasin",
      }).populate("userPrograms");

      const akbar = await User.findOne({
        username: "akbar",
      }).populate("userPrograms");

      const date = makeStartAndEndDate();
      const windows10NVDresponse = await axios.get(
        `https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=${windows10.cpeName}&pubStartDate=${date.startYear}-${date.startMonth}-${date.startDate}T00:00:00.000&pubEndDate=${date.endYear}-${date.endMonth}-${date.endDate}T00:00:00.000`,
        {
          headers: { apiKey: "fbdba56c-61a3-4734-825b-b7763d4db31a" },
        }
      );

      const android13NVDresponse = await axios.get(
        `https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=${android13.cpeName}&pubStartDate=${date.startYear}-${date.startMonth}-${date.startDate}T00:00:00.000&pubEndDate=${date.endYear}-${date.endMonth}-${date.endDate}T00:00:00.000`,
        {
          headers: { apiKey: "fbdba56c-61a3-4734-825b-b7763d4db31a" },
        }
      );

      expect(
        yasin.userPrograms.filter((p) => p.cpeName === windows10.cpeName)[0]
          .newCVEs.length
      ).toBe(windows10NVDresponse.data.vulnerabilities.length);
      expect(
        yasin.userPrograms.filter((p) => p.cpeName === android13.cpeName)[0]
          .newCVEs.length
      ).toBe(android13NVDresponse.data.vulnerabilities.length);
      expect(
        akbar.userPrograms.filter((p) => p.cpeName === windows10.cpeName)[0]
          .newCVEs.length
      ).toBe(windows10NVDresponse.data.vulnerabilities.length);

      expect(resOfWindowsNewCVEsYasin.body.newCVEs.length).toBe(
        windows10NVDresponse.data.vulnerabilities.length
      );

      expect(resOfWindowsNewCVEsAkbar.body.newCVEs.length).toBe(
        windows10NVDresponse.data.vulnerabilities.length
      );

      expect(resOfAndroid13NewCVEsYasin.body.newCVEs.length).toBe(
        android13NVDresponse.data.vulnerabilities.length
      );

      expect(windows10.newCVEs.length).toBe(
        windows10NVDresponse.data.vulnerabilities.length
      );

      expect(android13.newCVEs.length).toBe(
        android13NVDresponse.data.vulnerabilities.length
      );
    }, 600000);

    test("(GIVEN: db with 1 user that inserted android 13) (WHEN: we assume that some time has passed and when whe try to find new cves, some of the new cves are disapeared (they are older than 90 days ago and api does not show them to us)) (THEN: the extra cves should be removed from androids new CVEs)", async () => {
      const res0 = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "mm.y.khani@gmail.com",
      });

      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:google:android:13.0:*:*:*:*:*:*:*",
          cpeId: "36DB42C7-1317-4784-A679-73C7C8B1818C",
          title: "Google Android 13.0",
        })
        .set("x-auth-token", res0.body.token);

      const date1 = {
        startDate: "20",
        startMonth: "05",
        startYear: "2023",
        endDate: "15",
        endMonth: "08",
        endYear: "2023",
      };

      const date2 = {
        startDate: "20",
        startMonth: "05",
        startYear: "2023",
        endDate: "15",
        endMonth: "06",
        endYear: "2023",
      };

      await findNewCVEs(date1);
      const cpeBefore = await CPE.findOne({
        cpeName: "cpe:2.3:o:google:android:13.0:*:*:*:*:*:*:*",
      }).populate("newCVEs");
      await findNewCVEs(date2);
      const cpeAfter = await CPE.findOne({
        cpeName: "cpe:2.3:o:google:android:13.0:*:*:*:*:*:*:*",
      }).populate("newCVEs");

      const responseDate1 = await axios.get(
        `https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=${cpeBefore.cpeName}&pubStartDate=${date1.startYear}-${date1.startMonth}-${date1.startDate}T00:00:00.000&pubEndDate=${date1.endYear}-${date1.endMonth}-${date1.endDate}T00:00:00.000`,
        {
          headers: { apiKey: "fbdba56c-61a3-4734-825b-b7763d4db31a" },
        }
      );

      const responseDate2 = await axios.get(
        `https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=${cpeBefore.cpeName}&pubStartDate=${date2.startYear}-${date2.startMonth}-${date2.startDate}T00:00:00.000&pubEndDate=${date2.endYear}-${date2.endMonth}-${date2.endDate}T00:00:00.000`,
        {
          headers: { apiKey: "fbdba56c-61a3-4734-825b-b7763d4db31a" },
        }
      );

      expect(cpeBefore.newCVEs.length).toBe(
        responseDate1.data.vulnerabilities.length
      );
      expect(cpeAfter.newCVEs.length).toBe(
        responseDate2.data.vulnerabilities.length
      );
    }, 100000);

    test("(GIVEN: db with 1 user that inserted android 13) (WHEN: we assume that some time has passed and when whe try to find new cves, some of the new cves are published recently and some of the old ones are disapeared due to 90 days limit) (THEN: the fresh cves should be add to new CVEs and the old ones should be removed )", async () => {
      const res0 = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "mm.y.khani@gmail.com",
      });

      await request(app)
        .post("/my-cpes")
        .send({
          cpeName: "cpe:2.3:o:google:android:13.0:*:*:*:*:*:*:*",
          cpeId: "36DB42C7-1317-4784-A679-73C7C8B1818C",
          title: "Google Android 13.0",
        })
        .set("x-auth-token", res0.body.token);

      const date1 = {
        startDate: "20",
        startMonth: "04",
        startYear: "2023",
        endDate: "15",
        endMonth: "05",
        endYear: "2023",
      };

      const date2 = {
        startDate: "01",
        startMonth: "05",
        startYear: "2023",
        endDate: "01",
        endMonth: "08",
        endYear: "2023",
      };

      await findNewCVEs(date1);
      const cpeBefore = await CPE.findOne({
        cpeName: "cpe:2.3:o:google:android:13.0:*:*:*:*:*:*:*",
      }).populate("newCVEs");
      await findNewCVEs(date2);
      const cpeAfter = await CPE.findOne({
        cpeName: "cpe:2.3:o:google:android:13.0:*:*:*:*:*:*:*",
      }).populate("newCVEs");

      const responseDate1 = await axios.get(
        `https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=${cpeBefore.cpeName}&pubStartDate=${date1.startYear}-${date1.startMonth}-${date1.startDate}T00:00:00.000&pubEndDate=${date1.endYear}-${date1.endMonth}-${date1.endDate}T00:00:00.000`,
        {
          headers: { apiKey: "fbdba56c-61a3-4734-825b-b7763d4db31a" },
        }
      );

      const responseDate2 = await axios.get(
        `https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=${cpeBefore.cpeName}&pubStartDate=${date2.startYear}-${date2.startMonth}-${date2.startDate}T00:00:00.000&pubEndDate=${date2.endYear}-${date2.endMonth}-${date2.endDate}T00:00:00.000`,
        {
          headers: { apiKey: "fbdba56c-61a3-4734-825b-b7763d4db31a" },
        }
      );

      expect(cpeBefore.newCVEs.length).toBe(
        responseDate1.data.vulnerabilities.length
      );
      expect(cpeAfter.newCVEs.length).toBe(
        responseDate2.data.vulnerabilities.length
      );
    }, 100000);
  });
});
