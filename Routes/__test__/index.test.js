const app = require("../../app");
const request = require("supertest");
const mongoose = require("mongoose");
const { User } = require("../../models/user");
const { CVE } = require("../../models/cve");
const { CPE } = require("../../models/cpe");

describe("API endpoints", () => {
  beforeAll(async () => {
    await mongoose.connect("mongodb://127.0.0.1:27017/CVE", {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
  });

  //   beforeEach(async () => {});

  afterEach(async () => {
    await User.deleteMany();
    await CVE.deleteMany();
    await CPE.deleteMany();
  });

  // afterAll(async () => {
  //   await Quote.drop();
  //   await mongoose.connection.close();
  // });

  describe("Register", () => {
    test("(GIVEN: empty db) (WHEN: user inserts a valid user pass email) (THEN: successfull register)", async () => {
      const res = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const user = await User.findOne({ username: "yasin" });
      expect(user.username).toBe("yasin");
      expect(res.body.token).not.toEqual(undefined);
    });

    test("(GIVEN: empty db) (WHEN: user inserts an username that has been used before) (THEN: failed register)", async () => {
      await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "yasinKhani@gmail.com",
      });

      const res = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "yasinGhorbani@gmail.com",
      });
      expect(res.body).toEqual({
        error: "قبلا کاربری با این نام کاربری ثبت نام کرده",
        type: "duplicateUsername",
      });
    });

    test("(GIVEN: empty db) (WHEN: user inserts an email that has been used before) (THEN: failed register)", async () => {
      await request(app).post("/users").send({
        username: "yasinKhani",
        password: "123",
        email: "yasin@gmail.com",
      });

      const res = await request(app).post("/users").send({
        username: "yasinGhorbani",
        password: "123",
        email: "yasin@gmail.com",
      });
      expect(res.body).toEqual({
        error: "قبلا کاربری با این ایمیل ثبت نام کرده",
        type: "duplicateEmail",
      });
    });

    test("(GIVEN: empty db) (WHEN: user does not insert at least one of inputs) (THEN: failed register)", async () => {
      const res1 = await request(app).post("/users").send({
        email: "yasin@gmail.com",
      });

      const res2 = await request(app).post("/users").send({
        username: "yasin",
        email: "yasin@gmail.com",
      });

      const res3 = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
      });
      expect(res1.body).toEqual({
        error: "نام کاربری نمی‌تواند خالی باشد.",
        errorFor: "username",
        type: "wrongInputFormat",
      });

      expect(res2.body).toEqual({
        error: "رمز عبور نمی‌تواند خالی باشد.",
        errorFor: "password",
        type: "wrongInputFormat",
      });

      expect(res3.body).toEqual({
        error: "ایمیل نمی‌تواند خالی باشد.",
        errorFor: "email",
        type: "wrongInputFormat",
      });
    });
  });

  describe("Login", () => {
    test("(GIVEN: user has been registered before) (WHEN: user inserts a valid user pass) (THEN: successfull login)", async () => {
      await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res = await request(app)
        .post("/users/login")
        .send({ username: "yasin", password: "123" });
      const user = await User.findOne({ username: "yasin" });

      expect(user.username).toBe("yasin");
      expect(res.body.token).not.toEqual(undefined);
    });

    test("(GIVEN: empty db) (WHEN: user inserts an invalid user pass that does not match any user) (THEN: failed login)", async () => {
      const res = await request(app)
        .post("/users/login")
        .send({ username: "yasin", password: "123" });

      expect(res.status).toBe(400);
      expect(res.body.error).toEqual("کاربری با این نام کاربری ثبت نام نکرده!");
      expect(res.body.type).toEqual("wrongUsername");
      expect(res.body.token).toEqual(undefined);
    });

    test("(GIVEN: ) (WHEN: user inserts an invalid user pass that does not contain username) (THEN: failed login)", async () => {
      const res = await request(app)
        .post("/users/login")
        .send({ password: "123" });

      expect(res.status).toBe(400);
      expect(res.body.error).toEqual("نام کاربری نمی‌تواند خالی باشد.");
      expect(res.body.errorFor).toEqual("username");
      expect(res.body.token).toEqual(undefined);
    });

    test("(GIVEN: ) (WHEN: user inserts an invalid user pass that does not contain password) (THEN: failed login)", async () => {
      const res = await request(app)
        .post("/users/login")
        .send({ username: "yasin" });

      expect(res.status).toBe(400);
      expect(res.body.error).toEqual("رمز عبور نمی‌تواند خالی باشد.");
      expect(res.body.errorFor).toEqual("password");
      expect(res.body.token).toEqual(undefined);
    });
  });

  describe("Change password", () => {
    test("(GIVEN: a db with registered user) (WHEN: user inserts valid old and new pass) (THEN: successfull change pass)", async () => {
      const res1 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res2 = await request(app)
        .put("/users/me/password")
        .send({ oldPassword: "123", newPassword: "1234" })
        .set("x-auth-token", res1.body.token);

      const res3 = await request(app)
        .post("/users/login")
        .send({ username: "yasin", password: "123" });
      const res4 = await request(app)
        .post("/users/login")
        .send({ username: "yasin", password: "1234" });

      expect(res3.body.token).toEqual(undefined);
      expect(res4.body.token).not.toEqual(undefined);
    });
  });

  describe("Change info", () => {
    test("(GIVEN: a db with registered user) (WHEN: user inserts both of email and phoneNumber) (THEN: successfull change info)", async () => {
      const res1 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res2 = await request(app)
        .put("/users/me/info")
        .send({ email: "ali@gmail.com", phoneNumber: "09131234567" })
        .set("x-auth-token", res1.body.token);

      const yasin = await User.findOne({ username: "yasin" });

      expect(yasin.email).toEqual("ali@gmail.com");
      expect(yasin.phoneNumber).toEqual("09131234567");
    });

    test("(GIVEN: a db with registered user that has a phone number) (WHEN: user inserts just email) (THEN: successfull change info)", async () => {
      const res1 = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "yasin@gmail.com",
      });

      const res3 = await request(app)
        .put("/users/me/info")
        .send({ phoneNumber: "09131234567" })
        .set("x-auth-token", res1.body.token);

      const res2 = await request(app)
        .put("/users/me/info")
        .send({ email: "ali@gmail.com" })
        .set("x-auth-token", res1.body.token);

      const yasin = await User.findOne({ username: "yasin" });

      expect(yasin.email).toEqual("ali@gmail.com");
      expect(yasin.phoneNumber).toEqual("09131234567");
    });

    test("(GIVEN: a db with registered user) (WHEN: user inserts not complete request bodies) (THEN: failed change info)", async () => {
      const res0 = await request(app).post("/users").send({
        username: "yasin",
        password: "123",
        email: "yasin@gmail.com",
      });
      const res1 = await request(app)
        .put("/users/me/info")
        .send({ phoneNumber: "09121234567" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter1 = await User.findOne({ username: "yasin" });

      const res2 = await request(app)
        .put("/users/me/info")
        .send({ email: "", phoneNumber: "09131234567" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter2 = await User.findOne({ username: "yasin" });

      const res3 = await request(app)
        .put("/users/me/info")
        .send({ email: "ya", phoneNumber: "09131234567" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter3 = await User.findOne({ username: "yasin" });

      const res4 = await request(app)
        .put("/users/me/info")
        .send({ email: "yasin", phoneNumber: "09131234567" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter4 = await User.findOne({ username: "yasin" });

      const res5 = await request(app)
        .put("/users/me/info")
        .send({ email: "jasem@gmail.com", phoneNumber: "" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter5 = await User.findOne({ username: "yasin" });

      const res6 = await request(app)
        .put("/users/me/info")
        .send({ email: "jasem@gmail.com", phoneNumber: "12" })
        .set("x-auth-token", res0.body.token);

      const yasinAfter6 = await User.findOne({ username: "yasin" });

      expect(yasinAfter1.email).toEqual("yasin@gmail.com");
      expect(yasinAfter1.phoneNumber).toEqual("09121234567");

      expect(yasinAfter2.email).toEqual("yasin@gmail.com");
      expect(yasinAfter2.phoneNumber).toEqual("09121234567");

      expect(yasinAfter3.email).toEqual("yasin@gmail.com");
      expect(yasinAfter3.phoneNumber).toEqual("09121234567");

      expect(yasinAfter4.email).toEqual("yasin@gmail.com");
      expect(yasinAfter4.phoneNumber).toEqual("09121234567");

      expect(yasinAfter5.email).toEqual("yasin@gmail.com");
      expect(yasinAfter5.phoneNumber).toEqual("09121234567");

      expect(yasinAfter6.email).toEqual("yasin@gmail.com");
      expect(yasinAfter6.phoneNumber).toEqual("09121234567");
    });
  });

  describe("get current user", () => {
    test("(GIVEN: a db that contains a user) (WHEN: user inserts a valid token) (THEN: successfull getting data)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      const res1 = await request(app)
        .get("/users/me")
        .set("x-auth-token", res0.body.token);

      expect(res1.body.username).toBe("yasin");
    });

    test("(GIVEN: an empty db) (WHEN: user inserts a valid token) (THEN: failed getting data)", async () => {
      const res0 = await request(app)
        .post("/users")
        .send({ username: "yasin", password: "123", email: "yasin@gmail.com" });

      await User.deleteMany();

      const res1 = await request(app)
        .get("/users/me")
        .set("x-auth-token", res0.body.token);

      expect(res1.body.error).toBe("کاربر حذف شده است.");
    });
  });
});
