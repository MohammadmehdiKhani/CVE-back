const { required } = require("joi");
const { User, validate } = require("../models/user");
const { Program } = require("../models/program");
const mongoose = require("mongoose");
const express = require("express");
const router = express.Router();
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const auth = require("../middleware/auth.js");

router.get("/me", auth, async (req, res) => {
  const user = await User.findById(req.user._id).select("-password");
  res.send(user);
});

router.put("/", auth, async (req, res) => {
  const user = await User.findById(req.user._id).select("-password");
  user.email = req.body.email;
  user.phoneNumber = req.body.phoneNumber;
  user.save();
  res.send(user);
});

router.put("/me/password", auth, async (req, res) => {
  const user = await User.findById(req.user._id);

  const salt = await bcrypt.genSalt(5);
  newHash = await bcrypt.hash(req.body.newPassword, salt);
  user.password = newHash;
  await user.save();
  res.send();
});

router.post("/", async (req, res) => {
  //const validationResult = validate(req.body);
  //if (validationResult.error)
  //return res.status(400).send({ error: error.details[0].message });

  const user1 = await User.findOne({ username: req.body.username });
  if (user1)
    return res
      .status(400)
      .send({ error: "قبلا کاربری با این نام کاربری ثبت نام کرده" });

  const user2 = await User.findOne({ email: req.body.email });
  if (user2)
    return res
      .status(400)
      .send({ error: "قبلا کاربری با این ایمیل ثبت نام کرده" });

  const salt = await bcrypt.genSalt(5);

  const user = new User({
    username: req.body.username,
    email: req.body.email,
    password: await bcrypt.hash(req.body.password, salt),
  });
  await user.save();
  const token = jwt.sign({ _id: user._id, username: user.username }, "jwtpk", {
    expiresIn: "1h",
  });
  res.send({
    id: user._id,
    username: user.username,
    email: user.email,
    token: token,
  });
});

module.exports = router;
