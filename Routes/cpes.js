const Joi = require("joi");
const { User } = require("../models/user");
const { CVE } = require("../models/cve");
const mongoose = require("mongoose");
const express = require("express");
const router = express.Router();
const auth = require("../middleware/auth.js");
var ObjectId = mongoose.Types.ObjectId;
const axios = require("axios");

router.get("/", async (req, res) => {
  const cpeNameId = req.query.cpeNameId;
  const keyWord = req.query.keyWord;
  let data = undefined;
  try {
    if (cpeNameId)
      data = await axios.get(
        `https://services.nvd.nist.gov/rest/json/cpes/2.0?cpeNameId=${cpeNameId}`,
        {
          headers: { apiKey: "fbdba56c-61a3-4734-825b-b7763d4db31a" },
        }
      );

    if (keyWord)
      data = await axios.get(
        `https://services.nvd.nist.gov/rest/json/cpes/2.0?keywordSearch=${keyWord}`,
        {
          headers: { apiKey: "fbdba56c-61a3-4734-825b-b7763d4db31a" },
        }
      );

    if (!keyWord && !cpeNameId)
      return res.status(400).send({
        error: "فیلد نام برنامه نمی‌تواند خالی باشد",
        type: "fieldCanNotBeEmpty",
      });

    res.send(data.data);
  } catch (e) {
    console.log(e.response);
    if (e.response && e.response.status == 404) {
      return res.status(404).send({
        error: "برنامه مورد نظر پیدا نشد",
        type: "cpeNameIdDoesNotFinded",
      });
    }

    if (e.response && e.response.status % 100 == 5) {
      return res.status(500).send({
        error: "خطای سرور",
        type: "nvdServerDown",
      });
    }
  }
});

module.exports = router;
