const Joi = require("joi");
const { User } = require("../models/user");
const { Program } = require("../models/program");
const mongoose = require("mongoose");
const express = require("express");
const router = express.Router();
const auth = require("../middleware/auth.js");
var ObjectId = mongoose.Types.ObjectId;

router.post("/", auth, async (req, res) => {
  const user = await User.findById(req.user._id).select("-password");
  let programsClone = [...user.userArray];
  console.log(user.userArray);
  const programObjectId = new ObjectId(req.body.id);

  programsClone = programsClone.filter(
    (p) => p.program.toString() === req.body.id
  );
  if (programsClone.length > 0)
    return res.status(401).send({ error: "This program is already added" });

  /*
  ...
  getting new CVEs for this choosen program
  ...
  */

  const payload = { program: programObjectId, newCVEsList: [] };
  user.userArray.push(payload);
  user.save();
  res.send(user);
});

router.get("/", auth, async (req, res) => {
  const user = await User.findById(req.user._id)
    .select("-password")
    .populate("userArray.program");
  res.send(user.userArray);
});

router.delete("/", auth, async (req, res) => {
  const objectId = new ObjectId(req.body.id);
  const user = await User.findById(req.user._id).select("-password");

  let programsClone = [...user.userArray];
  programsClone = programsClone.filter(
    (p) => !(p.program.toString() === req.body.id)
  );

  user.userArray = programsClone;

  user.save();

  res.send("goh");
});

module.exports = router;
