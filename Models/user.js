const Joi = require("joi");
const mongoose = require("mongoose");
const { Program } = require("./program");
const { CVE } = require("./cve");

/*const express = require("express");
var ObjectId = mongoose.Types.ObjectId;

const app = express();

app.use(express.json());

mongoose
  .connect("mongodb://127.0.0.1:27017/CVE")
  .then(() => console.log("connected to DB"))
  .catch((err) => console.log("can not connect to DB"));

app.listen(3001, () => console.log("listening on port 3001"));
*/

const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
    minlength: 3,
    maxlength: 50,
    unique: true,
  },

  password: { type: String, required: true, minlength: 3, maxlength: 2000 },

  email: {
    type: String,
    required: true,
    minlength: 3,
    maxlength: 300,
    unique: true,
  },
  userArray: [
    {
      program: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Program",
      },

      newCVEsList: [
        {
          cve: { type: mongoose.Schema.Types.ObjectId, ref: "CVE" },
          seen: { type: Boolean, default: false },
        },
      ],
    },
  ],
});

const User = mongoose.model("User", userSchema);

/*addPro = async () => {
   const user = await User.findOne({ username: "haji" });
  const java = new ObjectId("643b11371837aeeb56a181b6");
  const cve1 = new ObjectId("644402a2244c69d496b1444b");
  const cve2 = new ObjectId("644402cda27bd3033f37451d");
  console.log(java);
  console.log(cve1);
  console.log(cve2);

  const payLoad = {
    program: java,
    newCVEsList: [
      { cve: cve1, seen: false },
      { cve: cve2, seen: false },
    ],
  };

  user.userArray.push(payLoad);
  await user.save();
  console.log(user.userArray);
*/
/*
  let user1 = await User.findOne({ username: "haji" }).populate({
    path: "userArray.newCVEsList.cve",
  });
  console.log(user1.userArray);
  
};
*/

//addPro();

/*validateUser = (user) => {
  const schema = Joi.object({
    username: Joi.string().min(3).max(50).required(),
    password: Joi.string().min(3).max(300).required(),
    email: Joi.string().min(3).max(300).required().email(),
    programs: Joi.array(),
  });

  const validation = schema.validate(user);
  return validation;
};
*/

exports.User = User;
//exports.validate = validateUser;

/*
programs: [
  {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Program",
    default: new Array(),
  },
],
*/
